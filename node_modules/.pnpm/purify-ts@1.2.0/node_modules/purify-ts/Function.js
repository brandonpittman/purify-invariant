"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.curry = exports.orderToNumber = exports.compare = exports.Order = exports.always = exports.identity = void 0;
/** The identity function, returns the value it was given */
var identity = function (x) { return x; };
exports.identity = identity;
/** Returns a function that always returns the same value. Also known as `const` in other languages */
var always = function (x) {
    return function () {
        return x;
    };
};
exports.always = always;
var Order;
(function (Order) {
    Order["LT"] = "LT";
    Order["EQ"] = "EQ";
    Order["GT"] = "GT";
})(Order = exports.Order || (exports.Order = {}));
/** Compares two values using the default "<" and ">" operators */
var compare = function (x, y) {
    if (x > y) {
        return Order.GT;
    }
    else if (x < y) {
        return Order.LT;
    }
    else {
        return Order.EQ;
    }
};
exports.compare = compare;
/** Maps the Order enum to the values expected by the standard ECMAScript library when doing comparison (Array.prototype.sort, for example) */
var orderToNumber = function (order) {
    switch (order) {
        case Order.LT:
            return -1;
        case Order.EQ:
            return 0;
        case Order.GT:
            return 1;
    }
};
exports.orderToNumber = orderToNumber;
/** Takes a function that receives multiple arguments and returns a "curried" version of that function that can take any number of those arguments and if they are less than needed a new function that takes the rest of them will be returned */
var curry = function (fn) {
    return function currify() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return args.length >= fn.length
            ? fn.apply(undefined, args)
            : currify.bind.apply(currify, __spreadArray([undefined], __read(args), false));
    };
};
exports.curry = curry;
