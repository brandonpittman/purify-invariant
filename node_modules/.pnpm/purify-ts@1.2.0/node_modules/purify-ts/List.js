"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.List = void 0;
var Tuple_1 = require("./Tuple");
var Maybe_1 = require("./Maybe");
var Function_1 = require("./Function");
/** Returns Just the first element of an array or Nothing if there is none. If you don't want to work with a Maybe but still keep type safety, check out `NonEmptyList` */
var head = function (list) {
    return list.length > 0 ? (0, Maybe_1.Just)(list[0]) : Maybe_1.Nothing;
};
/** Returns Just the last element of an array or Nothing if there is none */
var last = function (list) {
    return list.length > 0 ? (0, Maybe_1.Just)(list[list.length - 1]) : Maybe_1.Nothing;
};
/** Returns all elements of an array except the first */
var tail = function (list) {
    return list.length > 0 ? (0, Maybe_1.Just)(list.slice(1)) : Maybe_1.Nothing;
};
/** Returns all elements of an array except the last */
var init = function (list) {
    return list.length > 0 ? (0, Maybe_1.Just)(list.slice(0, -1)) : Maybe_1.Nothing;
};
/** Returns a tuple of an array's head and tail */
var uncons = function (list) {
    return list.length > 0 ? (0, Maybe_1.Just)((0, Tuple_1.Tuple)(list[0], list.slice(1))) : Maybe_1.Nothing;
};
/* Returns the sum of all numbers inside an array */
var sum = function (list) { return list.reduce(function (acc, x) { return acc + x; }, 0); };
function find(f, list) {
    switch (arguments.length) {
        case 1:
            return function (list) { return find(f, list); };
        default:
            return Maybe_1.Maybe.fromNullable(list.find(f));
    }
}
function findIndex(f, list) {
    switch (arguments.length) {
        case 1:
            return function (list) { return findIndex(f, list); };
        default:
            return Maybe_1.Maybe.fromPredicate(function (x) { return x !== -1; }, list.findIndex(f));
    }
}
function at(index, list) {
    switch (arguments.length) {
        case 1:
            return function (list) { return at(index, list); };
        default:
            return list[index] === undefined ? Maybe_1.Nothing : (0, Maybe_1.Just)(list[index]);
    }
}
function sort(compare, list) {
    switch (arguments.length) {
        case 1:
            return function (list) { return sort(compare, list); };
        default:
            return __spreadArray([], __read(list), false).sort(function (x, y) { return (0, Function_1.orderToNumber)(compare(x, y)); });
    }
}
exports.List = {
    init: init,
    uncons: uncons,
    at: at,
    head: head,
    last: last,
    tail: tail,
    find: find,
    findIndex: findIndex,
    sum: sum,
    sort: sort
};
