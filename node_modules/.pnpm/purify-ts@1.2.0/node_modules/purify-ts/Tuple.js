"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tuple = void 0;
var TupleImpl = /** @class */ (function () {
    function TupleImpl(first, second) {
        this.first = first;
        this.second = second;
        this.length = 2;
        this['fantasy-land/equals'] = this.equals;
        this['fantasy-land/bimap'] = this.bimap;
        this['fantasy-land/map'] = this.map;
        this['fantasy-land/reduce'] = this.reduce;
        this['fantasy-land/ap'] = this.ap;
        this[0] = first;
        this[1] = second;
    }
    TupleImpl.prototype[Symbol.iterator] = function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.first];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, this.second];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    };
    TupleImpl.prototype.toJSON = function () {
        return this.toArray();
    };
    TupleImpl.prototype.inspect = function () {
        return "Tuple(".concat(JSON.stringify(this.first), ", ").concat(JSON.stringify(this.second), ")");
    };
    TupleImpl.prototype.toString = function () {
        return this.inspect();
    };
    TupleImpl.prototype.fst = function () {
        return this.first;
    };
    TupleImpl.prototype.snd = function () {
        return this.second;
    };
    TupleImpl.prototype.equals = function (other) {
        return this.first === other.fst() && this.second === other.snd();
    };
    TupleImpl.prototype.bimap = function (f, g) {
        return (0, exports.Tuple)(f(this.first), g(this.second));
    };
    TupleImpl.prototype.mapFirst = function (f) {
        return (0, exports.Tuple)(f(this.first), this.second);
    };
    TupleImpl.prototype.map = function (f) {
        return (0, exports.Tuple)(this.first, f(this.second));
    };
    TupleImpl.prototype.reduce = function (reducer, initialValue) {
        return reducer(initialValue, this.second);
    };
    TupleImpl.prototype.toArray = function () {
        return [this.first, this.second];
    };
    TupleImpl.prototype.swap = function () {
        return (0, exports.Tuple)(this.second, this.first);
    };
    TupleImpl.prototype.ap = function (f) {
        return (0, exports.Tuple)(this.first, f.snd()(this.second));
    };
    TupleImpl.prototype.every = function (pred) {
        return pred(this.first) && pred(this.second);
    };
    TupleImpl.prototype.some = function (pred) {
        return pred(this.first) || pred(this.second);
    };
    return TupleImpl;
}());
exports.Tuple = Object.assign(function (fst, snd) { return new TupleImpl(fst, snd); }, {
    fromArray: function (_a) {
        var _b = __read(_a, 2), fst = _b[0], snd = _b[1];
        return (0, exports.Tuple)(fst, snd);
    },
    fanout: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a = __read(args, 3), f = _a[0], g = _a[1], value = _a[2];
        switch (args.length) {
            case 3:
                return (0, exports.Tuple)(f(value), g(value));
            case 2:
                return function (value) { return exports.Tuple.fanout(f, g, value); };
            default:
                return function (g) {
                    return function (value) {
                        return exports.Tuple.fanout(f, g, value);
                    };
                };
        }
    }
});
TupleImpl.prototype.constructor = exports.Tuple;
