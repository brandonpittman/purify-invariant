"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EitherAsync = void 0;
var Either_1 = require("./Either");
var MaybeAsync_1 = require("./MaybeAsync");
var helpers = {
    liftEither: function (either) {
        if (either.isRight()) {
            return Promise.resolve(either.extract());
        }
        throw either.extract();
    },
    fromPromise: function (promise) {
        return promise.then(helpers.liftEither);
    },
    throwE: function (error) {
        throw error;
    }
};
var EitherAsyncImpl = /** @class */ (function () {
    function EitherAsyncImpl(runPromise) {
        var _this = this;
        this.runPromise = runPromise;
        this[_a] = 'EitherAsync';
        this['fantasy-land/map'] = this.map;
        this['fantasy-land/bimap'] = this.bimap;
        this['fantasy-land/chain'] = this.chain;
        this['fantasy-land/ap'] = this.ap;
        this['fantasy-land/extend'] = this.extend;
        this['fantasy-land/alt'] = this.alt;
        this.then = function (onfulfilled, onrejected) {
            return _this.run().then(onfulfilled, onrejected);
        };
    }
    EitherAsyncImpl.prototype.leftOrDefault = function (defaultValue) {
        return this.run().then(function (x) { return x.leftOrDefault(defaultValue); });
    };
    EitherAsyncImpl.prototype.orDefault = function (defaultValue) {
        return this.run().then(function (x) { return x.orDefault(defaultValue); });
    };
    EitherAsyncImpl.prototype.join = function () {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(_this, void 0, void 0, function () {
            var either, nestedEither;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this];
                    case 1:
                        either = _b.sent();
                        if (!either.isRight()) return [3 /*break*/, 3];
                        return [4 /*yield*/, either.extract()];
                    case 2:
                        nestedEither = _b.sent();
                        return [2 /*return*/, helpers.liftEither(nestedEither)];
                    case 3: return [2 /*return*/, helpers.liftEither(either)];
                }
            });
        }); });
    };
    EitherAsyncImpl.prototype.ap = function (eitherF) {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(_this, void 0, void 0, function () {
            var otherValue, thisValue;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, eitherF];
                    case 1:
                        otherValue = _b.sent();
                        if (!otherValue.isRight()) return [3 /*break*/, 3];
                        return [4 /*yield*/, this];
                    case 2:
                        thisValue = _b.sent();
                        if (thisValue.isRight()) {
                            return [2 /*return*/, otherValue.extract()(thisValue.extract())];
                        }
                        else {
                            return [2 /*return*/, helpers.liftEither(thisValue)];
                        }
                        _b.label = 3;
                    case 3: return [2 /*return*/, helpers.liftEither(otherValue)];
                }
            });
        }); });
    };
    EitherAsyncImpl.prototype.alt = function (other) {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(_this, void 0, void 0, function () {
            var thisValue, otherValue;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this];
                    case 1:
                        thisValue = _b.sent();
                        if (!thisValue.isRight()) return [3 /*break*/, 2];
                        return [2 /*return*/, thisValue.extract()];
                    case 2: return [4 /*yield*/, other];
                    case 3:
                        otherValue = _b.sent();
                        return [2 /*return*/, helpers.liftEither(otherValue)];
                }
            });
        }); });
    };
    EitherAsyncImpl.prototype.extend = function (f) {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(_this, void 0, void 0, function () {
            var either, v;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.run()];
                    case 1:
                        either = _b.sent();
                        if (either.isRight()) {
                            v = exports.EitherAsync.liftEither(either);
                            return [2 /*return*/, helpers.liftEither((0, Either_1.Right)(f(v)))];
                        }
                        return [2 /*return*/, helpers.liftEither(either)];
                }
            });
        }); });
    };
    EitherAsyncImpl.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _b, e_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        _b = Either_1.Right;
                        return [4 /*yield*/, this.runPromise(helpers)];
                    case 1: return [2 /*return*/, _b.apply(void 0, [_c.sent()])];
                    case 2:
                        e_1 = _c.sent();
                        return [2 /*return*/, (0, Either_1.Left)(e_1)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    EitherAsyncImpl.prototype.bimap = function (f, g) {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(_this, void 0, void 0, function () {
            var either;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.run()];
                    case 1:
                        either = _b.sent();
                        return [2 /*return*/, helpers.liftEither(either.bimap(f, g))];
                }
            });
        }); });
    };
    EitherAsyncImpl.prototype.map = function (f) {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return _this.runPromise(helpers).then(f); });
    };
    EitherAsyncImpl.prototype.mapLeft = function (f) {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(_this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.runPromise(helpers)];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        e_2 = _b.sent();
                        throw f(e_2);
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    EitherAsyncImpl.prototype.chain = function (f) {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(_this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.runPromise(helpers)];
                    case 1:
                        value = _b.sent();
                        return [2 /*return*/, helpers.fromPromise(f(value))];
                }
            });
        }); });
    };
    EitherAsyncImpl.prototype.chainLeft = function (f) {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(_this, void 0, void 0, function () {
            var e_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.runPromise(helpers)];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        e_3 = _b.sent();
                        return [2 /*return*/, helpers.fromPromise(f(e_3))];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    EitherAsyncImpl.prototype.toMaybeAsync = function () {
        var _this = this;
        return (0, MaybeAsync_1.MaybeAsync)(function (_b) {
            var liftMaybe = _b.liftMaybe;
            return __awaiter(_this, void 0, void 0, function () {
                var either;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.run()];
                        case 1:
                            either = _c.sent();
                            return [2 /*return*/, liftMaybe(either.toMaybe())];
                    }
                });
            });
        });
    };
    EitherAsyncImpl.prototype.swap = function () {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(_this, void 0, void 0, function () {
            var either;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.run()];
                    case 1:
                        either = _b.sent();
                        if (either.isRight())
                            helpers.throwE(either.extract());
                        return [2 /*return*/, helpers.liftEither((0, Either_1.Right)(either.extract()))];
                }
            });
        }); });
    };
    EitherAsyncImpl.prototype.ifLeft = function (effect) {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(_this, void 0, void 0, function () {
            var either;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.run()];
                    case 1:
                        either = _b.sent();
                        either.ifLeft(effect);
                        return [2 /*return*/, helpers.liftEither(either)];
                }
            });
        }); });
    };
    EitherAsyncImpl.prototype.ifRight = function (effect) {
        var _this = this;
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(_this, void 0, void 0, function () {
            var either;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.run()];
                    case 1:
                        either = _b.sent();
                        either.ifRight(effect);
                        return [2 /*return*/, helpers.liftEither(either)];
                }
            });
        }); });
    };
    EitherAsyncImpl.prototype.void = function () {
        return this.map(function (_) { });
    };
    EitherAsyncImpl.prototype.caseOf = function (patterns) {
        return this.run().then(function (x) { return x.caseOf(patterns); });
    };
    EitherAsyncImpl.prototype.finally = function (effect) {
        var _this = this;
        return (0, exports.EitherAsync)(function (_b) {
            var fromPromise = _b.fromPromise;
            return fromPromise(_this.run().finally(effect));
        });
    };
    return EitherAsyncImpl;
}());
_a = Symbol.toStringTag;
exports.EitherAsync = Object.assign(function (runPromise) { return new EitherAsyncImpl(runPromise); }, {
    fromPromise: function (f) { return (0, exports.EitherAsync)(function (_b) {
        var fP = _b.fromPromise;
        return fP(f());
    }); },
    liftEither: function (either) {
        return (0, exports.EitherAsync)(function (_b) {
            var liftEither = _b.liftEither;
            return liftEither(either);
        });
    },
    lefts: function (list) {
        return Promise.all(list.map(function (x) { return x.run(); })).then(Either_1.Either.lefts);
    },
    rights: function (list) {
        return Promise.all(list.map(function (x) { return x.run(); })).then(Either_1.Either.rights);
    },
    sequence: function (eas) {
        return (0, exports.EitherAsync)(function (helpers) { return __awaiter(void 0, void 0, void 0, function () {
            var res, eas_1, eas_1_1, e, e_4_1;
            var e_4, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        res = [];
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 6, 7, 12]);
                        eas_1 = __asyncValues(eas);
                        _c.label = 2;
                    case 2: return [4 /*yield*/, eas_1.next()];
                    case 3:
                        if (!(eas_1_1 = _c.sent(), !eas_1_1.done)) return [3 /*break*/, 5];
                        e = eas_1_1.value;
                        if (e.isLeft()) {
                            return [2 /*return*/, helpers.liftEither(e)];
                        }
                        res.push(e.extract());
                        _c.label = 4;
                    case 4: return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 12];
                    case 6:
                        e_4_1 = _c.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 12];
                    case 7:
                        _c.trys.push([7, , 10, 11]);
                        if (!(eas_1_1 && !eas_1_1.done && (_b = eas_1.return))) return [3 /*break*/, 9];
                        return [4 /*yield*/, _b.call(eas_1)];
                    case 8:
                        _c.sent();
                        _c.label = 9;
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        if (e_4) throw e_4.error;
                        return [7 /*endfinally*/];
                    case 11: return [7 /*endfinally*/];
                    case 12: return [2 /*return*/, helpers.liftEither((0, Either_1.Right)(res))];
                }
            });
        }); });
    },
    all: function (eas) {
        return exports.EitherAsync.fromPromise(function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_b) {
            return [2 /*return*/, Promise.all(eas).then(Either_1.Either.sequence)];
        }); }); });
    }
});
EitherAsyncImpl.prototype.constructor = exports.EitherAsync;
